/*
Back-End Development
Create a Table
In this project, you will create your own friends table and add/delete data from it!

The instructions provided are a general guideline. Feel free to add more columns, insert more data, and create more tables.

After completing the instructions for each Task below, click the “Save” button to check your progress. If nothing populates in the “Query Results” tab to the right, double-check your work for syntax errors.

If you get stuck during this project or would like to see an experienced developer work through it, click Get Unstuck to see a walkthrough video.

Tasks
9/9 complete
Mark the tasks as complete by checking them off
1.
Create a table named friends with three columns:

id that stores INTEGER
name that stores TEXT
birthday that stores DATE
The CREATE TABLE statement is used to create a new table in the database:

CREATE TABLE table_name (
   column1 DATA_TYPE,
   column2 DATA_TYPE,
   column3 DATA_TYPE
);

Copy to Clipboard

Don’t forget the ; at the end!

Your code should look something like:

CREATE TABLE friends (
   id INTEGER,
   name TEXT,
   birthday DATE
);

Copy to Clipboard

2.
Beneath your current code, add Ororo Munroe to friends.

Her birthday is May 30th, 1940.

The INSERT INTO statement is used to insert new records into a table:

INSERT INTO table_name (column1, column2, column3) 
VALUES (value1, value2, value3);

Copy to Clipboard

Your code should look something like:

INSERT INTO friends (id, name, birthday) 
VALUES (1, 'Ororo Munroe', '1940-05-30');

Copy to Clipboard

For the `DATE` data type, the format is YYYY-MM-DD.

3.
Let’s make sure that Ororo has been added to the database:

SELECT * 
FROM friends;

Copy to Clipboard

Check for two things:

Is friends table created?
Is Ororo Munroe added to it?
4.
Let’s move on!

Add two of your friends to the table.

Insert an id, name, and birthday for each of them.

Your code should look something like:

INSERT INTO friends (id, name, birthday) 
VALUES (2, 'BFF One', 'YYYY-MM-DD');

INSERT INTO friends (id, name, birthday) 
VALUES (3, 'BFF Two', 'YYYY-MM-DD');

Copy to Clipboard

5.
Ororo Munroe just realized that she can control the weather and decided to change her name. Her new name is “Storm”.

Update her record in friends.

The UPDATE statement is used to modify the existing records in a table:

UPDATE table_name
SET column1 = value1
WHERE condition;

Copy to Clipboard

Your code should look something like:

UPDATE friends
SET name = 'Storm'
WHERE id = 1;

Copy to Clipboard

6.
Add a new column named email.

The ALTER TABLE statement is used to add, delete, or modify columns in an existing table:

ALTER TABLE table_name
ADD COLUMN column DATA_TYPE;

Copy to Clipboard

Your code should look something like:

ALTER TABLE friends 
ADD COLUMN email TEXT; 

Copy to Clipboard

7.
Update the email address for everyone in your table.

Storm’s email is storm@codecademy.com.

To update Storm’s email:

UPDATE friends
SET email = 'storm@codecademy.com'
WHERE id = 1;

Copy to Clipboard

And do the same for both of your friends.

8.
Wait, Storm is fictional…

Remove her from friends.

DELETE FROM friends
WHERE id = 1;

Copy to Clipboard

:(

9.
Great job! Let’s take a look at the result one last time:

SELECT * 
FROM friends;

Copy to Clipboard

The result should have four columns (id, name, birthday, email) and two rows.

If you are feeling ambitious, try adding a phone column, an instagram column, and more of your buddies to the table!
*/
/****************************************************************************************************************************************************************/


/*
CREATE TABLE friends (
  id INTEGER,
  name TEXT,
  birthday DATE
);

INSERT INTO friends (id, name, birthday)
VALUES (1, 'Ororo Munroe', '1940-05-30');

INSERT INTO friends (id, name, birthday)
VALUES (2, 'Alisha Wong', '1991-08-02');

INSERT INTO friends (id, name, birthday)
VALUES (3, 'Daniel Osnes', '1990-03-28');

UPDATE friends
SET name = 'Storm'
WHERE id = 1;

ALTER TABLE friends
ADD COLUMN email TEXT;

UPDATE FRIENDS 
SET email = 'storm@codecademy.com'
WHERE id = 1;

UPDATE FRIENDS
SET email = 'madeupemail@example.com'
WHERE id = 2;

UPDATE FRIENDS
SET email = 'fakeemail@example.com'
WHERE id = 3;

DELETE FROM friends
WHERE id = 1;

ALTER TABLE friends
ADD COLUMN phone TEXT;

UPDATE friends
SET phone = '123-456-7890'
WHERE id = 1;

UPDATE friends
SET phone = '234-567-8901'
WHERE id = 2;

UPDATE friends
SET phone = '345-678-9012'
WHERE id = 3;

ALTER TABLE friends
ADD COLUMN instagram TEXT;

UPDATE friends
SET instagram = '@username'
WHERE id = 1;

UPDATE friends
SET instagram = '@username1'
WHERE id = 2;

UPDATE friends
SET instagram = '@username2'
WHERE id = 3;

SELECT * FROM friends;
*/
/****************************************************************************************************************************************************************/


/*
Query Results
id	name	birthday	email	phone	instagram
2	Alisha Wong	1991-08-02	madeupemail@example.com	234-567-8901	@username1
3	Daniel Osnes	1990-03-28	fakeemail@example.com	345-678-9012	@username2
Database Schema
celebs
name	type
id	INTEGER
name	TEXT
age	INTEGER
twitter_handle	TEXT
Rows: 1
friends
name	type
id	INTEGER
name	TEXT
birthday	DATE
email	TEXT
phone	TEXT
instagram	TEXT
Rows: 2
*/
/****************************************************************************************************************************************************************/


