/*
Combining tables manually is time-consuming.
Luckily, SQL gives us an easy sequence for this. It's called [JOIN]

If we want to combine orders and customers we would type:

SELECT * 
FROM orders
JOIN customers
    ON orders.customer_id = customers.customer_id;

Let's break down this command:

The first line selects all columns from out combined table.
If we want to select certain columns we can specify which ones we want.

The second line specifies the first table that we want to look in, orders.

The third line uses JOIN to say that we want to combine information from orders with customers.

The fourth line tells us how to combine two tables.
We want to match orders table's customer_id column with customers table's customer_id column.

Because column names are often repeated across multiple tables,
we use the syntax table_name.column_name to be sure that out request for columsn are unambiguous.
In our example, we use this syntax in the ON statement, but we will also use it in the SELECT or any other statement
where we refer to column names.

For example,
Instead of selecting ALL the columns using *,
if we only wanted to slect orders table's order_id column and 
customers table's customer_name column, we could use the following query:

SELCT orders.order_id, customers.customer_name
FROM orders
JOIN customers
    ON orders.customer_id = customers.customer_id;

Instructions
Checkpoint 1 Passed
1.
Join orders table and subscriptions table and select all columns.

Make sure to join on the subscription_id column.

Suppose we do:

SELECT *
FROM orders
LIMIT 10;

SELECT *
FROM subscriptions
LIMIT 10;

Copy to Clipboard

You will notice that both orders table and subscriptions table have a subscription_id column.

And we want to match these two columns:

orders.subscription_id
subscriptions.subscription_id
SELECT *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id;

Copy to Clipboard

Notice that in the column subscriptions.subscription_id, the table name has a ‘s’ in the end.

Important: only include the first query to pass checkpoint 1.

Checkpoint 2 Passed
2.
Don’t remove the previous query.

Add a second query after your first one that only selects rows from the join where description is equal to ‘Fashion Magazine’.

The WHERE clause goes after the JOIN!

Answer:

-- Checkpoint 1

SELECT *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id;

-- Checkpoint 2

SELECT *
FROM orders
JOIN subscriptions
  ON orders.subscription_id = subscriptions.subscription_id
WHERE subscriptions.description = 'Fashion Magazine';

Copy to Clipboard

What is the difference between the two result tables?

Important: only include the first query to pass checkpoint 1.
//task 1
SELECT *
FROM orders 
JOIN subscriptions
ON orders.subscription_id = subscriptions.subscription_id;
//task 2
SELECT *
FROM orders 
JOIN subscriptions
ON orders.subscription_id = subscriptions.subscription_id
WHERE subscriptions.description = 'Fashion Magazine';


Query Results
order_id	customer_id	subscription_id	purchase_date	subscription_id	description	price_per_month	subscription_length
1	3	2	01-10-2017	2	Politics Magazine	11	6 months
2	2	4	01-9-2017	4	Fashion Magazine	15	12 months
3	3	4	01-26-2017	4	Fashion Magazine	15	12 months
4	9	9	01-4-2017	9	Sports Magazine	13	3 months
5	7	5	01-25-2017	5	Fashion Magazine	17	6 months
6	8	2	01-18-2017	2	Politics Magazine	11	6 months
7	5	8	01-11-2017	8	Sports Magazine	12	6 months
8	9	5	01-26-2017	5	Fashion Magazine	17	6 months
9	4	4	01-25-2017	4	Fashion Magazine	15	12 months
10	1	7	01-26-2017	7	Sports Magazine	11	12 months
11	5	4	01-7-2017	4	Fashion Magazine	15	12 months
12	3	2	01-21-2017	2	Politics Magazine	11	6 months
13	3	5	01-3-2017	5	Fashion Magazine	17	6 months
14	6	5	01-22-2017	5	Fashion Magazine	17	6 months
15	1	2	01-6-2017	2	Politics Magazine	11	6 months
16	1	2	01-11-2017	2	Politics Magazine	11	6 months
17	3	6	01-17-2017	6	Fashion Magazine	19	3 months
18	3	8	01-29-2017	8	Sports Magazine	12	6 months
19	4	9	01-3-2017	9	Sports Magazine	13	3 months
20	1	7	01-24-2017	7	Sports Magazine	11	12 months
order_id	customer_id	subscription_id	purchase_date	subscription_id	description	price_per_month	subscription_length
2	2	4	01-9-2017	4	Fashion Magazine	15	12 months
3	3	4	01-26-2017	4	Fashion Magazine	15	12 months
9	4	4	01-25-2017	4	Fashion Magazine	15	12 months
11	5	4	01-7-2017	4	Fashion Magazine	15	12 months
5	7	5	01-25-2017	5	Fashion Magazine	17	6 months
8	9	5	01-26-2017	5	Fashion Magazine	17	6 months
13	3	5	01-3-2017	5	Fashion Magazine	17	6 months
14	6	5	01-22-2017	5	Fashion Magazine	17	6 months
17	3	6	01-17-2017	6	Fashion Magazine	19	3 months
Database Schema
customers
name	type
customer_id	INT
customer_name	VARCHAR(256)
address	VARCHAR(256)
Rows: 10
subscriptions
name	type
subscription_id	INT
description	VARCHAR(256)
price_per_month	INT
subscription_length	TEXT
Rows: 9
orders
name	type
order_id	INT
customer_id	INT
subscription_id	INT
purchase_date	DATE
Rows: 20

*/